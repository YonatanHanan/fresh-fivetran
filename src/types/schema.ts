/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/agents': {
    /** Returns a list of agents */
    get: operations['getAllAgents'];
  };
  '/agents/{agent_id}': {
    /** Retrieves existing agent details */
    get: operations['getAgent'];
    /** Perform async update of existing agent */
    put: operations['updateAgent'];
  };
  '/channels': {
    /** Returns a list of channels */
    get: operations['getAllChannels'];
  };
  '/conversations': {
    /** Creating new conversation/Creating message in existing conversation */
    post: operations['createConversation'];
  };
  '/conversations/{conversation_id}': {
    /** Get conversation by Id */
    get: operations['getConversation'];
    /** update conversation */
    put: operations['updateConversation'];
  };
  '/conversations/{conversation_id}/messages': {
    /** create a new message */
    post: operations['createMessage'];
  };
  '/groups': {
    /** Returns a list of groups */
    get: operations['getAllGroups'];
  };
  '/metrics/historical': {
    /** get historical dashboard metrics */
    get: operations['getMetrics'];
  };
  '/metrics/instant': {
    /** get instant dashboard metrics */
    get: operations['getInstantMetrics'];
  };
  '/reports': {
    /** Report request is fetched and processed in a queue asynchronously */
    post: operations['asynCreateReports'];
  };
  '/reports/{id}': {
    /** Fetches you the link along with metadata details like the job Status */
    get: operations['getReportsJobStatus'];
  };
  '/users': {
    /** Create a new user */
    post: operations['createUser'];
  };
  '/users/{user_id}': {
    /** Get existing user details */
    get: operations['getUser'];
    /** Perform async update of existing user */
    put: operations['updateUser'];
  };

  '/user-statuses': {};
  '/teams': {};
  '/calls': {};
  '/call_metrics': {};
  '/calls/{call_id}/call_metrics': {};
  '/calls/{call_id}/recording/{recording_id}': {};
}

export interface definitions {
  Link: {
    rel?: string;
    href?: string;
    hreflang?: string;
    media?: string;
    title?: string;
    type?: string;
    deprecation?: string;
  };
  /** @description agent model */
  agent: {
    /**
     * @description id
     * @example 2681d294-3460-4f32-b5fb-828958995b5c
     */
    id?: string;
    /**
     * @description email
     * @example govind.patel@freshworks.com
     */
    email?: string;
    avatar?: definitions['image'];
    /** @example 123456789 */
    phone?: string;
    /** @example I'm your friendly neighbourhood support guy! */
    biography?: string;
    /** Format: int32 */
    get_ocr_available?: number;
    /**
     * @description first_name
     * @example Govind
     */
    first_name?: string;
    /**
     * @description last_name
     * @example Patel
     */
    last_name?: string;
    social_profiles?: definitions['social_profile'][];
    groups?: string[];
  };
  /** @description agents model */
  agents: {
    agents?: definitions['agent'][];
    pagination?: definitions['pagination'];
    links?: definitions['links'];
  };
  /** @description Response for async fetch reports call */
  async_reports_response: {
    /**
     * @description report id to fetch the status and url of the requested report
     * @example 1ac520cf-b1a4-4741-8b01-e383563ae402
     */
    id?: string;
    /** @description Url link for the get call to access the results of submitted query */
    link?: definitions['Link'];
  };
  /** @description callback part */
  callback_part: {
    /**
     * @description payload
     * @example {"id":"483b0c7a-583e-4d5f-a486-9028cdc39e24", "vote":"1"}
     */
    payload: string;
    /**
     * @description label
     * @example üëç upvote
     */
    label: string;
  };
  /** @description channel model */
  channel: {
    /**
     * @description id
     * @example 6c03caf2-a37f-45a2-a9a3-6e03aa7b85f5
     */
    id?: string;
    icon?: definitions['image'];
    /** Format: date-time */
    updated_time?: string;
    /** @example true */
    enabled?: boolean;
    /** @example true */
    public?: boolean;
    /** @example Inbox */
    name: string;
    /** @example [sales, support] */
    tags: string[];
    welcome_message?: definitions['message'];
    assign_to_group?: definitions['group'];
    /** @example en-Us */
    locale?: string;
  };
  /** @description channels model */
  channels: {
    channels?: definitions['channel'][];
    pagination?: definitions['pagination'];
    links?: definitions['links'];
  };
  /** @description collection part */
  collection_part: {
    sub_parts: definitions['message_part'][];
  };
  /** @description conversation model */
  conversation: {
    /** @example c2937604-0a08-43c2-a09c-e77f5f565a0e */
    conversation_id: string;
    /** @example 9d83ebc5-e036-4b48-b655-b0d79584b2c5 */
    app_id: string;
    messages: definitions['message'][];
    /**
     * @example new
     * @enum {string}
     */
    status: 'new' | 'assigned' | 'resolved' | 'reopened';
    /** @example 2681d294-3460-4f32-b5fb-828958995b5c */
    channel_id?: string;
    agents?: definitions['agent'][];
    users?: definitions['user'][];
    /** @example c2937604-0a08-43c2-a09c-e77f5f565a0e */
    assigned_agent_id: string;
    /** @example c2937604-0a08-43c2-a09c-e77f5f565a0e */
    assigned_group_id: string;
  };
  /** @description error model */
  error: {
    /**
     * Format: int32
     * @example 404
     */
    code: number;
    /**
     * @example AGENT_NOT_FOUND
     * @enum {string}
     */
    status: 'WRONG_PAGE' | 'AGENT_NOT_FOUND';
    /**
     * @example Agent does not exist
     * @enum {string}
     */
    message: 'The page does not exist in the search result' | 'This agent does not exist';
    details?: definitions['error_detail'][];
  };
  /** @description error detail model */
  error_detail: {
    type?: string;
  };
  /** @description Filters applied to obtain result */
  filter: {
    metric_filters?: definitions['key_value_pair'][];
  };
  /** @description group model */
  group: {
    /**
     * @description id
     * @example 6c03caf2-a37f-45a2-a9a3-6e03aa7b85f5
     */
    id: string;
    /**
     * @description name
     * @example Support
     */
    name: string;
    /**
     * @description description
     * @example Support
     */
    description?: string;
    /**
     * @description routing_type
     * @example OCR,DISABLED
     */
    routing_type?: string;
    agents: definitions['agent'][];
  };
  /** @description groups model */
  groups: {
    groups?: definitions['group'][];
    pagination?: definitions['pagination'];
    links?: definitions['links'];
  };
  /** @description Values for the metric over the time period requested, per grouping. */
  historic_values_per_grouping: {
    groupings?: definitions['key_value_pair'][];
    series?: definitions['values_across_time_periods'][];
  };
  /** @description Response for historical dashboard metrics API */
  historical_metrics: {
    /** @example team_performance.first_response_time */
    metric?: string[];
    /** @example 2019-01-01T15:30:00.000+05:30 */
    start?: string;
    /** @example 2019-05-31T15:30:00.000+05:30 */
    end?: string;
    filters?: definitions['filter'];
    /**
     * @example median
     * @enum {string}
     */
    aggregator?: 'min' | 'max' | 'avg' | 'median' | '90th_percentile';
    /**
     * @example 1h
     * @enum {string}
     */
    interval?: '1m' | '5m' | '15m' | '30m' | '1h' | '1d' | '1W' | '1M';
    data?: definitions['historic_values_per_grouping'][];
  };
  /** @description image model */
  image: {
    /** @example https://web.freshchat.com/img/johndoe.png */
    url?: string;
  };
  /** @description image part */
  image_part: {
    /** @description url */
    url: string;
  };
  /** @description Instant metrics API response */
  instant_metrics: {
    /** @example team_presence.online */
    metric?: string;
    filters?: definitions['filter'];
    data?: definitions['instant_values_per_grouping'][];
  };
  /** @description Values for a given metric, will include count and reference to the resources based on the request */
  instant_value: {
    /** @example team_member.online */
    key?: string;
    resources?: definitions['resources'][];
    /**
     * Format: int64
     * @example 23
     */
    count?: number;
  };
  /** @description Values at the current instant for a metric per grouping */
  instant_values_per_grouping: {
    groupings?: definitions['key_value_pair'][];
    values?: definitions['instant_value'][];
  };
  /** @description Key value info for groupings and filters */
  key_value_pair: {
    /** @example group */
    key?: string;
    /** @example 938899D8-41DE-48DF-A1DE-3B02F0560ED6 */
    value?: string;
  };
  /** @description link model */
  link: {
    /** @example /v1/groups?sort_by=name&items_per_page=10&sort_order=asc&page=3 */
    href?: string;
    /**
     * @example group
     * @enum {string}
     */
    rel?: 'group' | 'user' | 'message' | 'agent';
    /** @example GET */
    type?: string;
  };
  /** @description links model */
  links: {
    next_page?: definitions['link'];
    previous_page?: definitions['link'];
    first_page?: definitions['link'];
    last_page?: definitions['link'];
  };
  /** @description message model */
  message: {
    message_parts: definitions['message_part'][];
    reply_parts?: definitions['message_part'][];
    /** @example d01f83a4-6af0-4a05-8906-47284db2e1a8 */
    app_id: string;
    /** @example 9d304e8a-31fd-4e4a-85e8-b62edb95d53f */
    actor_id?: string;
    /**
     * @description id
     * @example 6c03caf2-a37f-45a2-a9a3-6e03aa7b85f5
     */
    id?: string;
    /** @example 1b99afe4-7b3d-4f9e-b284-d7778b249f6e */
    channel_id: string;
    /** @example da8de71b-78c8-4256-8923-0de858ff6a80 */
    conversation_id: string;
    /**
     * @example normal
     * @enum {string}
     */
    message_type: 'normal' | 'private';
    /**
     * @example agent
     * @enum {string}
     */
    actor_type: 'agent' | 'user';
    /**
     * Format: date-time
     * @example 2017-11-16T11:34:04.431Z
     */
    created_time?: string;
  };
  /** @description message part model. Exactly one part should be present */
  message_part: {
    text?: definitions['text_part'];
    image?: definitions['image_part'];
    url_button?: definitions['url_button_part'];
    quick_reply_button?: definitions['quick_reply_button_part'];
    collection?: definitions['collection_part'];
    callback?: definitions['callback_part'];
    reference?: definitions['reference_part'];
  };
  /** @description pagination model */
  pagination: {
    /**
     * Format: int32
     * @example 100
     */
    total_items?: number;
    /**
     * Format: int32
     * @example 10
     */
    total_pages?: number;
    /**
     * Format: int32
     * @example 2
     */
    current_page?: number;
    /**
     * Format: int32
     * @example 10
     */
    items_per_page?: number;
  };
  /** @description property model */
  property: {
    /**
     * @description name
     * @example orderId
     */
    name: string;
    /**
     * @description value
     * @example #1242
     */
    value: string;
  };
  /** @description quick reply button part */
  quick_reply_button_part: {
    /** @description customReplyText */
    custom_reply_text?: string;
    /** @description label */
    label: string;
  };
  /** @description Reference Part */
  reference_part: {
    /**
     * @description reference_id
     * @example 6c03caf2-a37f-45a2-a9a3-6e03aa7b85f9
     */
    reference_id?: string;
    /** @description label */
    label: string;
  };
  /** @description Response for GET reports call */
  report: {
    /**
     * @description Unique Id given to the customers for the requested query
     * @example 1ac520cf-b1a4-4741-8b01-e383563ae402
     */
    id?: string;
    /**
     * @description Indicates the status of the job results
     * @example COMPLETED
     * @enum {string}
     */
    status?: 'COMPLETED' | 'FAILED' | 'PENDING';
    /**
     * @description Private URL from which you can download the reports, expires after a fixed time
     * @example https://csat-reports.s3-us-west-2.amazonaws.com/233676087732066-a91025da-cd54-4e79-9c67-b74dd444f268?response-content-disposition=attachment%3B%20filename
     */
    link?: definitions['Link'];
  };
  /** @description list of resources contained in instantValuePerMetric */
  resources: {
    /** @example uuid1 */
    id?: string;
  };
  /** @description social profiles model */
  social_profile: {
    /**
     * @example facebook
     * @enum {string}
     */
    type: 'facebook' | 'twitter' | 'skype' | 'linkedin';
    /** @example govind.patel */
    id?: string;
  };
  /** @description text part */
  text_part: {
    /** @description This is a sample text message */
    content: string;
  };
  /** @description url button part */
  url_button_part: {
    /** @description url */
    url: string;
    /** @description label */
    label: string;
    /**
     * @description target
     * @enum {string}
     */
    target?: '_self' | '_blank';
  };
  /** @description user model */
  user: {
    /**
     * @description id
     * @example 2681d294-3460-4f32-b5fb-828958995b5c
     */
    id?: string;
    /**
     * @description email
     * @example govind.patel@freshworks.com
     */
    email?: string;
    avatar?: definitions['image'];
    /** @example 123456789 */
    phone?: string;
    /** @description user properties */
    properties?: definitions['property'][];
    /**
     * @description first_name
     * @example Govind
     */
    first_name?: string;
    /**
     * @description last_name
     * @example Patel
     */
    last_name?: string;
    social_profiles?: definitions['social_profile'][];
    /**
     * @description reference_id
     * @example 9d83ebc5-e036-4b48-b655-b0d79584b2c6
     */
    reference_id?: string;
    /**
     * Format: date-time
     * @description created_time
     * @example 2018-08-16T11:34:04.431Z
     */
    created_time?: string;
  };
  /** @description time period key value pairs per valuesAcrossTimePeriods value */
  value_per_time_period: {
    /** @example csat_metrics.satisfactory_interactions */
    key: string;
    /** @example 23 */
    value: string;
  };
  /** @description time series data for a given metric */
  values_across_time_periods: {
    /** @example 2019-06-01T00:00:00.000Z */
    start: string;
    /** @example 2019-07-01T00:00:00.000Z */
    end: string;
    values: definitions['value_per_time_period'][];
  };
}

export interface operations {
  /** Returns a list of agents */
  getAllAgents: {
    parameters: {
      query: {
        /** from page number */
        page?: number;
        /** number of items per page */
        items_per_page?: number;
        /** sort the list ascending/descending. Allowed values - asc/desc */
        sort_order?: 'asc' | 'desc';
        /** sort by email/first_name/last_name */
        sort_by?: 'email' | 'first_name' | 'last_name';
        /** include nested object ids. Only groups allowed at this time. Will add a groups field , which is the list of group ids this agent belongs to. */
        include?: 'groups'[];
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['agents'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** Retrieves existing agent details */
  getAgent: {
    parameters: {
      path: {
        agent_id: string;
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['agent'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Conflict */
      409: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** Perform async update of existing agent */
  updateAgent: {
    parameters: {
      path: {
        agent_id: string;
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['agent'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Conflict */
      409: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** Returns a list of channels */
  getAllChannels: {
    parameters: {
      query: {
        /** from page number */
        page?: number;
        /** number of items per page */
        items_per_page?: number;
        /** sort the list ascending/descending. Allowed values - asc/desc */
        sort_order?: 'asc' | 'desc';
        /** sort by name */
        sort_by?: 'name';
        /** locale for a channels */
        locale?: 'name';
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['channels'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** Creating new conversation/Creating message in existing conversation */
  createConversation: {
    parameters: {
      body: {
        /** Conversation Object */
        body: definitions['conversation'];
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['conversation'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Conflict */
      409: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** Get conversation by Id */
  getConversation: {
    parameters: {
      path: {
        conversation_id: string;
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['conversation'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Conflict */
      409: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** update conversation */
  updateConversation: {
    parameters: {
      path: {
        conversation_id: string;
      };
      body: {
        /** Conversation Object */
        body: definitions['conversation'];
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['conversation'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Conflict */
      409: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** create a new message */
  createMessage: {
    parameters: {
      path: {
        /** conversation Id to which this message will be added */
        conversation_id: string;
      };
      body: {
        /** Message object */
        message: definitions['message'];
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['message'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Conflict */
      409: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** Returns a list of groups */
  getAllGroups: {
    parameters: {
      query: {
        /** from page number */
        page?: number;
        /** number of items per page */
        items_per_page?: number;
        /** sort the list ascending/descending. Allowed values - asc/desc */
        sort_order?: 'asc' | 'desc';
        /** sort by name */
        sort_by?: 'name';
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['groups'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** get historical dashboard metrics */
  getMetrics: {
    parameters: {
      query: {
        /** metric name to query */
        metric?:
          | 'csat_metrics.satisfactory_interactions'
          | 'csat_metrics.unsatisfactory_interactions'
          | 'csat_metrics.total_rated_interactions'
          | 'csat_metrics.count_per_rating'
          | 'csat_metrics.rating'
          | 'team_performance.first_response_time'
          | 'team_performance.response_time'
          | 'team_performance.resolution_time'
          | 'team_performance.responses_sent'
          | 'team_performance.concurrency_ratio'
          | 'conversation_metrics.created_interactions'
          | 'conversation_metrics.assigned_interactions'
          | 'conversation_metrics.resolved_interactions'
          | 'conversation_metrics.assigned_x_mins_ago_and_not_replied_to'
          | 'conversation_metrics.created_x_mins_ago_and_unassigned'
          | 'conversation_metrics.wait_time';
        /** start time */
        start?: string;
        /** end time */
        end?: string;
        /** aggregator functions */
        aggregator?: 'min' | 'max' | 'avg' | 'median' | 'p90';
        /** time interval for the query result */
        interval?: '1m' | '5m' | '15m' | '1h' | '1d' | '1w' | '1mo';
        /** filtering params */
        filter_by?: 'group' | 'agent';
        /** time to query the recent metrics in minutes */
        x_time?: string;
        /** group by value */
        group_by?: 'group' | 'agent' | 'rating';
      };
    };
    responses: {
      /** Success Request */
      200: {
        schema: definitions['historical_metrics'];
      };
      /** Bad Request */
      400: {
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        schema: definitions['error'];
      };
    };
  };
  /** get instant dashboard metrics */
  getInstantMetrics: {
    parameters: {
      query: {
        /** metric name to query */
        metric?:
          | 'team_presence.online'
          | 'team_presence.offline'
          | 'team_presence.active_on_intelliassign'
          | 'team_presence.inactive_on_intelliassign'
          | 'team_presence.total_members';
        /** filtering params */
        filter_by?: 'group';
        /** group by key */
        group_by?: 'group';
        /** whether you need all the resources in the output or not */
        summary?: 'true' | 'false';
      };
    };
    responses: {
      /** Success Request */
      200: {
        schema: definitions['instant_metrics'];
      };
      /** Bad Request */
      400: {
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        schema: definitions['error'];
      };
    };
  };
  /** Report request is fetched and processed in a queue asynchronously */
  asynCreateReports: {
    parameters: {
      query: {
        /** report name to query */
        name?: 'team_performance' | 'helpdesk';
        /** start time */
        start?: string;
        /** end time */
        end?: string;
        /** list of aggregators which can be applied */
        aggregator?: 'avg' | 'median' | 'p90';
        /** time interval for the query result */
        interval?: '1m' | '5m' | '15m' | '1h' | '1d' | '1w' | '1mo';
        /** filtering params */
        filter_by?: 'group';
      };
    };
    responses: {
      /** Request Accepted */
      202: {
        schema: definitions['async_reports_response'];
      };
      /** Bad Request */
      400: {
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        schema: definitions['error'];
      };
    };
  };
  /** Fetches you the link along with metadata details like the job Status */
  getReportsJobStatus: {
    parameters: {
      path: {
        /** report id to fetch the status and url of the requested report */
        id: string;
      };
    };
    responses: {
      /** Success Request */
      200: {
        schema: definitions['report'];
      };
      /** Bad Request */
      400: {
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        schema: definitions['error'];
      };
    };
  };
  /** Create a new user */
  createUser: {
    parameters: {
      body: {
        /** User Object */
        body: definitions['user'];
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['user'];
      };
      /** Success Request */
      201: {
        headers: {};
        schema: definitions['user'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Conflict */
      409: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** Get existing user details */
  getUser: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['user'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Conflict */
      409: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
  /** Perform async update of existing user */
  updateUser: {
    parameters: {
      path: {
        user_id: string;
      };
      body: {
        /** User Object */
        body: definitions['user'];
      };
    };
    responses: {
      /** Success Request */
      200: {
        headers: {};
        schema: definitions['user'];
      };
      /** Bad Request */
      400: {
        headers: {};
        schema: definitions['error'];
      };
      /** Unauthenticated Request */
      401: {
        headers: {};
        schema: definitions['error'];
      };
      /** Forbidden */
      403: {
        headers: {};
        schema: definitions['error'];
      };
      /** Not Found */
      404: {
        headers: {};
        schema: definitions['error'];
      };
      /** Conflict */
      409: {
        headers: {};
        schema: definitions['error'];
      };
      /** Too Many Requests */
      429: {
        headers: {};
        schema: definitions['error'];
      };
      /** Internal Server Error */
      500: {
        headers: {};
        schema: definitions['error'];
      };
      /** Service Unavailable */
      503: {
        headers: {};
        schema: definitions['error'];
      };
    };
  };
}

export interface external {}
